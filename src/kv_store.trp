import lists

datatype Atoms = NONE | PUT | GET | DEL
       
let val empty = []
    fun put s k v =
	let fun inner [] acc false = reverse ((k, v)::acc)
	      | inner [] acc true = reverse acc
	      | inner ((k',v')::s') acc b = 
		if k = k'
		then inner s' ((k, v)::acc) true
		else inner s' ((k',v')::acc) b
	in inner s [] false
	end
    fun get s k = lookup s k NONE
    fun del s k =
	let fun inner [] acc = reverse acc
	      | inner ((k', v')::s') acc =
		if k = k'
		then inner s' acc
		else inner s' ((k', v')::acc)
	in inner s []
	end
    fun reset _ = empty
    fun main s = main (
	    receive [
		hn (PUT, k, v) => put s k v,
		hn (GET, k, pid) => send (pid, get s k); s,
		hn (DEL, k) => del s k
	])
in (* Testing *)
    let val processA =
	    spawn (fn () =>
		      spawn (fn () => sleep 6000; exit (authority, 0));
		   main empty)
   in print processA;
      send (processA, (PUT, 6, 28));
      send (processA, (GET, 6, self()));
      print (receive [ hn x => x ])
   end
end
