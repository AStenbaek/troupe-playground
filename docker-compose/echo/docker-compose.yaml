name: troupe-multi

services:
  # The init service generates keys and ids for the services.
  init:
    image: troupe-key-make
    pull_policy: never # Image does not exist on dockerhub.
    build:
      context: ../key-maker
      dockerfile: key-maker.Dockerfile
    command: > # Create indentities and distribute to the respective services.
      /bin/sh -c 'mkdir -p echo-server
                  mkdir -p echo-client
                  node /key-maker/mkid.mjs --privkeyfile=keys/relay.priv --idfile=keys/relay.id
                  node /key-maker/mkid.mjs --outfile=keys/echo-server.json
                  node /key-maker/mkid.mjs --outfile=keys/echo-client.json
                  node /key-maker/mkaliases.js --include=keys/echo-server.json --include=keys/echo-client.json --outfile=keys/aliases.json
                  cp keys/relay.priv /key-maker/relay/
                  cp keys/relay.id /key-maker/relay/
                  cp keys/relay.id /key-maker/echo-server/
                  cp keys/echo-server.json /key-maker/echo-server/
                  cp keys/relay.id /key-maker/echo-client/
                  cp keys/echo-client.json /key-maker/echo-client/
                  cp keys/aliases.json /key-maker/echo-client/'
    volumes:
      - relay-key:/key-maker/relay
      - server-key:/key-maker/echo-server
      - client-key:/key-maker/echo-client
    restart: no
    
  relay: # Troupe relay service in the compose network.
    container_name: relay
    image: troupe-relay
    pull_policy: never # Image does not exist on dockerhub.
    build: # Build the image if it does not exist.
      context: ../../relay
      dockerfile: relay.Dockerfile
    networks: # Restrict to the isolated network.
      - internal_only
    depends_on:
      init: # Only start after keys and ids are created.
        condition: service_completed_successfully
    volumes:
      - relay-key:/relay/keys
    command: node relay.mjs

  echo-server:
    container_name: server
    image: troupe-integrity
    pull_policy: never # Image does not exist on dockerhub.
    build: # Build the image if it does not exist.
      dockerfile: ../../dev-integrity.Dockerfile
    networks: # Restrict to the isolated network.
      - internal_only
    depends_on:
      init: # Only start after keys and ids are created.
        condition: service_completed_successfully
    volumes:
      - server-key:/Troupe/ids
    command: > # Run the echo server. Note the relay has the dns "relay".
      /bin/sh -c '/Troupe/network.sh\
                  /Troupe/examples/network/echo/echo-server.trp\
                  --id=ids/echo-server.json\
                  --relay=/dns4/relay/tcp/5555/ws/p2p/$(cat ids/relay.id)'

  echo-client:
    container_name: client
    image: troupe-integrity
    pull_policy: never # Image does not exist on dockerhub.
    build: # Build the image if it does not exist.
      dockerfile: ../../dev-integrity.Dockerfile
    networks: # Restrict to the isolated network.
      - internal_only
    depends_on:
      init: # Only start after keys and ids are created.
        condition: service_completed_successfully
    volumes:
      - client-key:/Troupe/ids
    command: > # Run the echo client.
      /bin/sh -c '/Troupe/network.sh\
                  /Troupe/examples/network/echo/echo-client.trp\
                  --id=ids/echo-client.json --aliases=ids/aliases.json\
                  --relay=/dns4/relay/tcp/5555/ws/p2p/$(cat ids/relay.id)'
    
networks:
  internal_only: # Network for isolating the composed containers.
    driver: bridge # Use the standard container network driver.
    internal: true # Make the compose network completely isolated.

volumes:
  relay-key:  # Volume for relay resources.
  server-key: # Volume for server resources.
  client-key: # Volume for client resources.
    
